package main

import (
	"fmt"
	"os"
	"strconv"
	"todo-cli/todo"
)

const filename = "tasks.json" // –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

func main() {
	args := os.Args    // –ß—Ç–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	if len(args) < 2 { // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (–º–µ–Ω—å—à–µ 2)
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã
		fmt.Println("Usage:")
		fmt.Println("  add <task>       ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
		fmt.Println("  list             ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
		fmt.Println("  done <id>        ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
		fmt.Println("  delete <id>      ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
		return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞
	}

	command := args[1] // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (add, list, done, delete)

	switch command { // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
	case "add":
		if len(args) < 3 { // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
			fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
			return // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
		}

		title := args[2]                       // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
		tasks, err := todo.LoadTasks(filename) // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
		if err != nil {                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏
			fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", err)
			return
		}

		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
		newTask := todo.Task{
			ID:    len(tasks) + 1, // ID –∑–∞–¥–∞—á–∏ = —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ + 1
			Title: title,          // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî —Ç–æ, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		}

		tasks = append(tasks, newTask) // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
		err = todo.SaveTasks(filename, tasks)
		if err != nil { // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏
			fmt.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err)
			return
		}

		// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
		fmt.Println("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:", title)

	case "list":
		tasks, err := todo.LoadTasks(filename) // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
		if err != nil {                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏
			fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", err)
			return
		}

		if len(tasks) == 0 { // –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç
			fmt.Println("–ó–∞–¥–∞—á–∏ –ø–æ–∫–∞ –Ω–µ—Ç.")
			return
		}

		// –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –∏—Ö ID –∏ —Å—Ç–∞—Ç—É—Å–æ–º
		for _, task := range tasks {
			status := "[ ]"     // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
			if task.Completed { // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
				status = "[x]" // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
			}
			// –í—ã–≤–æ–¥–∏–º ID –∑–∞–¥–∞—á–∏, –µ—ë —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
			fmt.Printf("%d. %s %s\n", task.ID, status, task.Title)
		}

	case "done":
		if len(args) < 3 { // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏
			fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.")
			return // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç (ID –∑–∞–¥–∞—á–∏) –≤ —á–∏—Å–ª–æ
		id, err := strconv.Atoi(args[2])
		if err != nil { // –ï—Å–ª–∏ ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
			fmt.Println("–û—à–∏–±–∫–∞: ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
			return
		}

		tasks, err := todo.LoadTasks(filename) // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
		if err != nil {                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏
			fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", err)
			return
		}

		// –ò—â–µ–º –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
		for i, task := range tasks {
			if task.ID == id { // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–¥–∞—á—É —Å —Ç–∞–∫–∏–º ID
				tasks[i].Completed = true // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
				break
			}
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
		err = todo.SaveTasks(filename, tasks)
		if err != nil { // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
			fmt.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err)
			return
		}

		fmt.Println("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")

	case "delete":
		if len(args) < 3 { // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
			fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
			return
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —á–∏—Å–ª–æ
		id, err := strconv.Atoi(args[2])
		if err != nil { // –ï—Å–ª–∏ ID –Ω–µ —á–∏—Å–ª–æ–≤–æ–π
			fmt.Println("–û—à–∏–±–∫–∞: ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
			return
		}

		tasks, err := todo.LoadTasks(filename) // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
		if err != nil {                        // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
			fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", err)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID
		if id <= 0 || id > len(tasks) {
			fmt.Println("–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
			return
		}

		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –±–µ–∑ —É–¥–∞–ª—ë–Ω–Ω–æ–π
		var newTasks []todo.Task
		for _, task := range tasks {
			if task.ID != id { // –ï—Å–ª–∏ ID –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–¥–∞–ª—è–µ–º—ã–º
				newTasks = append(newTasks, task) // –î–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
			}
		}

		// –ü–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
		for i := range newTasks {
			newTasks[i].ID = i + 1 // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏, –Ω–∞—á–∏–Ω–∞—è —Å 1
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
		err = todo.SaveTasks(filename, newTasks)
		if err != nil { // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
			fmt.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err)
			return
		}

		// –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
		fmt.Println("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

	default:
		// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:", command)

	case "stats":
		// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
		tasks, err := todo.LoadTasks(filename)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", err)
			return
		}

		// –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
		total := len(tasks)

		// –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
		done := 0
		for _, task := range tasks {
			if task.Completed {
				done++
			}
		}

		// –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Äî —ç—Ç–æ —Ç–µ, —á—Ç–æ –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
		active := total - done

		fmt.Println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:")
		fmt.Printf("  –í—Å–µ–≥–æ –∑–∞–¥–∞—á:     %d\n", total)
		fmt.Printf("  –í—ã–ø–æ–ª–Ω–µ–Ω–æ:       %d\n", done)
		fmt.Printf("  –û—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å: %d\n", active)
	}
}
